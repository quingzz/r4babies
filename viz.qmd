# Trực quan hóa

::: callout-note
# Các package được sử dụng trong bài học

-   tidyverse

-   plotly

-   sf

-   leaflet
:::

### Gọi các thư viện cho bài học

```{r}
library(tidyverse)
# library(plotly)
library(sf)
library(leaflet)
library(rio)

# install.packages("maptools", repos="http://R-Forge.R-project.org")
# devtools::install_github('oswaldosantos/ggsn')
# library(ggsn)
```

## ggplot

### Giới thiệu ggplot

Vẽ đồ thị với **ggplot2** dựa trên việc "thêm" các lớp đồ thị và các phần tử thiết kế chồng lên nhau, với mỗi lệnh được thêm vào các lệnh trước bằng một dấu cộng `+`

Thứ tự cơ bản để vẽ 1 đồ thị ggplot như sau:

-   Bắt đầu với lớp nền bằng lệnh `ggplot()` - lệnh này "mở" ggplot và cho phép các hàm tiếp theo được thêm vào với dấu `+`. Thông thường, đối tượng cần vẽ được chỉ định trong lệnh này

-   Thêm các lớp `geom` - mỗi lớp geom sẽ thêm 1 loại biểu đồ (VD: biểu đồ cột, biểu đồ đường, biểu đồ phân tán, histogram). Các hàm này đều bắt đầu bằng `geom_`

-   Thêm các yếu tố thiết kế vào đồ thị, chẳng hạn như nhãn trục, tiêu đề, phông chữ, kích thước, phối màu, chú giải hoặc xoay trục

```{r, eval=F}
# vẽ đồ thị từ bảng dữ liệu my_data
ggplot(data = my_data)+                   
  geom_point(                             # vẽ đồ thị phân tán
    mapping = aes(x = col1, y = col2),    # dùng giá trị cột col1 làm trục x và col2 làm trục y
    color = "red")+                       # tuỳ chọn khác
  labs()+                                 # thêm tên bảng và tên các trục
  theme()                                 # chỉnh thêm màu sắc, font, size
```

::: callout-note
#### Chọn màu cho ggplot

Ngoài các màu cơ bản, ta có thể quy định màu trong R dưới dạng hex color

VD

```{r, eval=FALSE}
ggplot(data = my_data)+                   
  geom_point(                             
    mapping = aes(x = col1, y = col2),    
    color = "#03d3fc")
```

Để có được hex color, ta có thể google "hex color", chọn màu phù hợp và copy HEX

![](img/viz/hex_color.png)
:::

### Một số `geom_` thông dụng

-   Histograms - `geom_histogram()`

-   Biểu đồ cột - `geom_bar()` hoặc `geom_col()`

-   Box plots - `geom_boxplot()`

-   Điểm (vd: biểu đồ phân tán) - `geom_point()`

-   Biểu đồ đường - `geom_line()` hoặc `geom_path()`

-   Đường xu hướng - `geom_smooth()`

::: callout-note
#### Argument `stat` của hàm `geom`

-   `"identity"` lấy dữ liệu thô

-   `"count"` đếm số quan sát (số hàng) trong từng phân nhóm

-   `"sum"` tính tổng của các hàng trong từng phân nhóm
:::

### Facet

Facets, hay "chia nhỏ biểu đồ", được sử dụng để chia một biểu đồ thành nhiều phần nhỏ, với mỗi phần ("facet") đại diện cho một nhóm của dữ liệu.

Trong ggplot, có 2 loại facet chính

-   `facet_wrap()` hiện thị các biểu đồ khác nhau cho từng nhóm của **một biến số**. (VD: thể hiện các đường cong dịch bệnh khác nhau cho từng khu vực).

-   `facet_grid()` áp dụng khi muốn **đưa một biến thứ hai** vào sắp xếp các biểu đồ con. Ở đây mỗi ô thể hiện sự giao nhau của các giá trị giữa *hai cột*.

VD:

| facet_wrap                                                                        | facet_grid                                                                        |
|------------------------------------|------------------------------------|
| biểu đồ số ca bệnh sốt rét chia theo tỉnh (tên tỉnh ở phía trên mỗi biểu đồ)      | biểu đồ số ca bệnh sốt rét chia theo tỉnh **và** nhóm tuổi                        |
| ![](https://epirhandbook.com/vn/_main_files/figure-html/unnamed-chunk-1044-1.png) | ![](https://epirhandbook.com/vn/_main_files/figure-html/unnamed-chunk-1047-1.png) |

## Plotly

Package `plotly` cung cấp lệnh `ggplotly` giúp người dùng nhanh chóng biến biểu đồ của ggplot thành biểu đồ tương tác (interactive plot).

VD

```{r, eval=F}
# Vẽ biểu đồ bằng ggplot 
plot <- ggplot(data = my_data)+                   
  geom_point(                             
    mapping = aes(x = col1, y = col2),    
    color = "#03d3fc")

# Dùng lệnh ggplotly để biến thành biểu đồ tương tác
ggplotly(plot)
```

::: callout-important
#### Lưu ý

Khi knit file `.Rmd` sang các định dạng file khác, tính tương tác của đồ thị **chỉ còn** **khi người dùng knit thành file `.html`**
:::

## Vẽ bản đồ

#### Dữ liệu bản đồ

Trước tiên, ta cần dữ liệu để vẽ biểu đồ trong R. Trong khoá học này ta sẽ sử dụng dữ liệu được cấp bởi [GADM](https://gadm.org).\

Để download dữ liệu biểu đồ Việt Nam, thực hiện các bước sau:

-   Vào trang <https://gadm.org/download_country.html>

-   Chọn `Vietnam` trong danh sách Country

-   Bấm `Geopackage`

-   File được tải về có tên là `gadm41_VNM.gpkg`

::: callout-important
#### Lưu ý

-   Các nguồn bản đồ mở thường sẽ không có các phần lãnh thổ tranh chấp (VD: Hoàng Sa, Trường Sa)

-   Các thay đổi về bản đồ hành chính có thể không được cập nhật kịp thời (VD: các quận được sáp nhập thành TP. Thủ Đức)
:::

Dữ liệu bản đồ tải về sẽ có 3 cấp bậc

-   Cấp tỉnh/ thành phố

-   Cấp quận/ huyện

-   Cấp phường/ xã

Để đọc dữ liệu bản đồ, dùng lệnh `st_read` của package `sf`

Để vẽ dữ liệu đọc được, dùng lệnh `geom_sf` của `ggplot`

```{r, output=FALSE}
# Đọc dữ liệu bản đồ
map_path <- "data"
vn_tinh <- st_read(dsn = file.path(map_path, "gadm41_VNM.gpkg"), layer = "ADM_ADM_1")
vn_qh <- st_read(dsn = file.path(map_path, "gadm41_VNM.gpkg"), layer = "ADM_ADM_2")
vn_px <- st_read(dsn = file.path(map_path, "gadm41_VNM.gpkg"), layer = "ADM_ADM_3")

```

```{r, eval=F}
# Vẽ dữ liệu đọc được 
vn_tinh %>% 
  ggplot() +
  ggplot2::geom_sf()

vn_qh %>% 
  ggplot() +
  geom_sf()

vn_px %>% 
  ggplot() +
  geom_sf()
```

### Leaflet

Gói `leaflet` được dùng để vẽ bản đồ tương tác.\
Chúng ta sử dụng `leaflet` thay vì ggplot + plotly vì bản đồ vẽ bởi leaflet thường đẹp hơn\

```{r}
labels <- sprintf("<strong> %s </strong> ", vn_tinh$NAME_1) %>%
  lapply(htmltools::HTML)
leaflet(vn_tinh) %>%
  #addTiles() %>%
  addPolygons(color = "grey", weight = 1,label = labels)

```
