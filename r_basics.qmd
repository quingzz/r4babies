# R cơ bản

::: callout-tip
# Mục tiêu

1.  Hiểu các thuật ngữ trong R
2.  Hiểu các datatype trong R
3.  Học các hàm thông dụng trong R
:::

::: callout-note
# Các package được sử dụng trong bài học

-   readxl

-   tidyverse
:::

### Gọi các thư viện cho bài học

```{r}
library(readxl)
library(tidyverse)
```

## Đối tượng trong R

Mọi thứ được lưu trữ trong R - bao gồm bộ dữ liệu, biến số, danh sách tên cột, kết quả đầu ra như biểu đồ - đều là **các đối tượng**, được **gán tên** và **có thể được tham chiếu** trong các lệnh sau đó.

Để tạo đối tượng trong R, ta dùng cú pháp sau

```{r, eval=FALSE}
tên_đối_tượng <- giá_trị_của_đối_tượng 

```

VD:

```{r}
# tạo đối tượng file_path để lưu trữ đường dẫn đến file excel
file_path <- "data/gdp-capita.xlsx"

# tạo đối tượng df lưu trữ bảng dữ liệu đọc từ file excel
df <- read_excel(path = file_path, sheet = 1)
```

Sau khi tạo 2 đối tượng file_path và df, ta có thể thử xem giá trị được lưu trữ

```{r}
file_path
df
```

::: callout-important
# Lưu ý

**Giá trị của một đối tượng có thể bị ghi đè** bất kỳ lúc nào bằng cách chạy lệnh gán để định nghĩa lại giá trị của nó. Do đó, **thứ tự của các lệnh được chạy rất quan trọng**.
:::

Lệnh sau sẽ định nghĩa lại giá trị cho đối tượng `file_path`

```{r}
file_path <- "data/new_path.xlsx"

# kiểm tra giá trị 
file_path
```

## Câu văn trong R

Câu lệnh (command) hoặc hàm (function) chính là những câu văn trong R để giao tiếp với máy tính. Chúng ta phải học ngữ pháp của 1 câu lệnh và ý nghĩa của nó để có thể sử dụng R để ra lệnh cho máy tính. Một câu lệnh trong R thường có dạng như sau:

```{r, eval = F}
tên-câu-lệnh(tên-tham-số = data-đầu-vào hoặc lựa-chọn)
```

-   Tên câu lệnh: nằm trước dấu `()`, thể hiện ý nghĩa câu lệnh dùng để làm gì.
-   Tên tham số (argument): nằm trong dấu `()` là những tham số của câu lệnh đó. Tham số là những yêu cầu nhỏ và cụ thể để máy tính hiểu rõ hơn yêu cầu của người dùng.
-   Dấu `=`: dùng để gán 1 giá trị cho tham số. Giá trị gán cho tham số có thể là một data đầu vào, hoặc một lựa chọn của người dùng (đúng/sai).

Ví dụ:

```{r, eval = F}
mean(x = df$col1, na.rm = TRUE)
```

-   Tên câu lệnh là `mean`: chúng ta đang yêu cầu máy tính hãy tính giá trị trung bình của 1 biến.
-   Các tham số là `x` và `na.rm`:
    -   `x`: là data đầu vào, ở đây chúng ta viết `x = df$col1` để cho máy tính biết data đầu vào là cột `col1` trong bảng data `df`.
    -   `na.rm`: là yêu cầu cụ thể cách giải quyết khi gặp missing value (NA), ở đây chúng ta lựa chọn `na.rm = TRUE` nghĩa là nếu cột `col1` có NA thì bỏ những giá trị NA đi trước khi tính trung bình.

::: callout-important
Để đọc hướng dẫn sử dụng về câu lệnh, gõ `?tên-câu-lệnh`.
:::

## Loại dữ liệu (datatype)

### Các datatype trong R

| Datatype   | Ý nghĩa                                                                                                                    |
|--------------------------|----------------------------------------------|
| numeric    | dữ liệu dạng số nguyên                                                                                                     |
| double     | dữ liệu dạng số thập phân                                                                                                  |
| logical    | dữ liệu dạng đúng/sai (TRUE/FALSE)                                                                                         |
| character  | dữ liệu dạng ký tự (hay còn gọi là string), được đặt trong dấu ngoặc kép. Đối tượng dạng ký tự thì **không thể tính toán** |
| Date       | dữ liệu ngày tháng                                                                                                         |
| factor     | dữ liệu dạng phân loại (categorical)                                                                                       |
| data.frame | dữ liệu dạng bảng                                                                                                          |
| tibble     | dữ liệu dạng bảng tương tự như data.frame, sự khác biệt chính là tibble in đẹp hơn trong R console                         |

::: callout-tip
Để kiểm tra datatype, sử dụng lệnh `class(tên_đối_tượng)`
:::

### Chuyển đổi datatype {#update_datatype}

Cú pháp chung cho thay đổi datatype là `as.datatype()`

Ví dụ như:\
- `as.numeric()` chuyển thành định dạng số.\
- `as.character()` chuyển thành định dạng văn bản.\
- `as.factor()` chuyển thành định dạng factor.\
- `as.Date()` chuyển thành định dạng ngày.

Ngoài ra, còn có các lệnh khác để phục vụ cho các mục đích cụ thể hơn, bao gồm:\
`ifelse()` chuyển thành định dạng logical theo điều kiện nhất định\
`is.na()` chuyển thành định dạng logical, các dữ liệu trống (`NA`) có giá trị `TRUE` và ngược lại.\
`dmy()`, `ymd()`, `mdy()`, ... chuyển đổi string theo các format khác nhau thành định dạng ngày

VD:

```{r}
# tạo danh sách mẫu
example_list <- c("1", "2", "3", "4", "5")
# thử sử dụng lệnh mean
mean(example_list)
# kiểm tra datatype 
class(example_list)

# TODO: thực hành điều chỉnh example_list để không còn Warning
```

## Làm việc với data.frame

### Lấy dữ liệu theo hàng/cột

-   Cú pháp: `tên_bảng_dữ_liệu[hàng, cột]`. Trong đó cột có thể là số thứ tự của cột hoặc tên cột.

-   Để lấy toàn bộ hàng thì để trống cột và ngược lại

-   Để lấy nhiều cột hay hàng thì cho tên cột hay hàng theo dạng list (chuỗi)

```{r}
# lấy dữ liệu tại hàng thứ 5, cột thứ 2
df[5 ,2]

# lấy dữ liệu tại hàng thứ 5, cột thứ 2
df[5 , "Country Code"]

# lấy hàng thứ 5 trong bảng df
df[5, ]

#lấy các cột Country Name, Country Code, 2015
df[, c("Country Name", "Country Code", "2015")] 

#lấy 10 hàng đầu tiên của các cột Country Name, Country Code, 2015
#1:10 là cú pháp nhanh để tạo chuỗi từ 1 đến 10
df[1:10, c("Country Name", "Country Code", "2015")] 

```

::: callout-note
Đối với cột, còn có cách trích xuất thông dụng khác bằng cách sử dụng dấu `$`. Tuy nhiên, cách này sẽ chỉ trích xuất giá trị trong 1 cột.

\
VD: df\$col1 sẽ trả về các giá trị trong cột `col1` của bảng `df`
:::

## Chuyển đổi datatype cho cột

Mỗi cột trong data.frame sẽ chứa các giá trị có cùng datatype.

Để thay đổi datatype của cột, ta có thể áp dụng các [function từ phần trước](#update_datatype).

VD:

```{r}
# đổi cột country code thành biến phân loại

df$`Country Code` <- as.factor(df$`Country Code`)
```

::: callout-important
## Lưu ý

-   Dấu `<-` được sử dụng ở VD trên để **gán giá trị mới** vào cột Country Code (tương đương việc UPDATE cột)

-   Nếu không sử dụng `<-` thì R chỉ trả về kết quả của function `as.factor` và bảng df sẽ **không** có thay đổi
:::

## Dữ liệu string

### Format string

|                    |             |                                     |
|--------------------|-------------|-------------------------------------|
| **Function**       | **Package** | **Công dụng**                       |
| tolower            | base        | biến thành chữ thường               |
| toupper            | base        | biến thành chữ hoa                  |
| str_to_title       | stringr     | in hoa chữ cái đầu tiên của từng từ |
| stri_trans_general | stringi     | loại bỏ dấu                         |

### Các hàm thông dụng của stringr

|                 |                                                                              |
|------------------|------------------------------------------------------|
| **Function**    | **Công dụng**                                                                |
| str_starts      | lọc hàng bắt đầu bằng chuỗi ký tự khớp với pattern                           |
| str_ends        | lọc hàng kết thúc bằng bằng chuỗi ký tự khớp với pattern                     |
| str_detect      | lọc hàng có chứa chuỗi ký tự khớp với pattern                                |
| str_interp      | chèn giá trị vào string (string interpolation)                               |
| str_extract     | trích 1 chuỗi con (substring) đầu tiên khớp với pattern                      |
| str_extract_all | trích tất cả các chuỗi con (substring) khớp với pattern                      |
| str_remove      | xoá 1 chuỗi con (substring) đầu tiên khớp với pattern                        |
| str_remove_all  | xoá tất cả các chuỗi con (substring) khớp với pattern                        |
| str_replace     | thay thế 1 chuỗi con (substring) đầu tiên khớp với pattern bằng 1 chuỗi mới  |
| str_replace_all | thay thế tất cả chuỗi con (substring) khớp với pattern bằng 1 chuỗi mới      |

[Tổng hợp các lệnh từ package stringr](https://stringr.tidyverse.org/reference/index.html)

## Dữ liệu ngày tháng

### Các lệnh liên quan đến ngày tháng

| Function       | Công dụng                               | Package   |
|----------------|-----------------------------------------|-----------|
| difftime()     | tính khoảng cách giữa hai mốc thời gian | base      |
| month()/year() | lấy tháng/ năm                          | lubridate |
| quarter()      | chuyển ngày sang quý                    | lubridate |
| today()        | lấy ngày hiện tại                       | lubridate |

[Tổng hợp các lệnh từ package lubridate](https://lubridate.tidyverse.org/reference/index.html)
