{
  "hash": "43777a0e11bfb640ece3d2abb490d7de",
  "result": {
    "markdown": "# Nhập môn R\n\n::: callout-tip\n# Mục tiêu\n\n1.  Hiểu các thuật ngữ trong R\n2.  Hiểu các datatype trong R\n3.  Học các package thông dụng trong R\n:::\n\n::: callout-note\n# Các package được sử dụng trong bài học\n\n-   tidyverse\n\n-   stringi\n\n-   writexl\n:::\n\n### Gọi các thư viện cho bài học\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(writexl)\nlibrary(stringi)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringi' was built under R version 4.3.1\n```\n:::\n:::\n\n\n::: callout-note\n### Package tidyverse\n\npackage tidyverse bao hàm nhiều package hỗ trợ trong việc phân tích dữ liệu, bao gồm các package sau: ggplot2, tibble, dplyr, tidyr, stringr, purrr, readr, forcats, lubridate\\\n\\\nVì vậy người dùng không cần gọi các thư viện trên sau khi gọi tidyverse\n:::\n\n## Đối tượng trong R\n\nMọi thứ được lưu trữ trong R - bao gồm bộ dữ liệu, biến số, danh sách tên cột, kết quả đầu ra như biểu đồ - đều là **các đối tượng**, được **gán tên** và **có thể được tham chiếu** trong các lệnh sau đó.\n\nĐể tạo đối tượng trong R, ta dùng cú pháp sau\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntên_đối_tượng <- giá_trị_của_đối_tượng \n```\n:::\n\n\n**VD**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tạo đối tượng file_path để lưu trữ đường dẫn đến file csv\nlife_exp_path <- \"data/life-exp.csv\"\npractising_cert_path <- \"data/practising_cert.csv\"\n\n# tạo đối tượng df lưu trữ bảng dữ liệu đọc từ file csv\nlife_exp_df <- read_csv(file = life_exp_path, show_col_types = FALSE)\npractising_cert_df <- read_csv(file = practising_cert_path, show_col_types = FALSE)\n```\n:::\n\n\nSau khi tạo các đối tượng, ta có thể thử xem giá trị được lưu trữ\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_exp_path\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data/life-exp.csv\"\n```\n:::\n\n```{.r .cell-code}\npractising_cert_path\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data/practising_cert.csv\"\n```\n:::\n\n```{.r .cell-code}\nhead(life_exp_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 22\n  Country      Year Status   `Life expectancy` `Adult Mortality` `infant deaths`\n  <chr>       <dbl> <chr>                <dbl>             <dbl>           <dbl>\n1 Afghanistan  2015 Develop…              65                 263              62\n2 Afghanistan  2014 Develop…              59.9               271              64\n3 Afghanistan  2013 Develop…              59.9               268              66\n4 Afghanistan  2012 Develop…              59.5               272              69\n5 Afghanistan  2011 Develop…              59.2               275              71\n6 Afghanistan  2010 Develop…              58.8               279              74\n# ℹ 16 more variables: Alcohol <dbl>, `percentage expenditure` <dbl>,\n#   `Hepatitis B` <dbl>, Measles <dbl>, BMI <dbl>, `under-five deaths` <dbl>,\n#   Polio <dbl>, `Total expenditure` <dbl>, Diphtheria <dbl>, `HIV/AIDS` <dbl>,\n#   GDP <dbl>, Population <dbl>, `thinness  1-19 years` <dbl>,\n#   `thinness 5-9 years` <dbl>, `Income composition of resources` <dbl>,\n#   Schooling <dbl>\n```\n:::\n\n```{.r .cell-code}\nhead(practising_cert_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 9\n  HoTen                TenQuocTich SoChungChi NoiCapChungChi NgayCapChungChi    \n  <chr>                <chr>       <chr>      <chr>          <dttm>             \n1 Phạm Thị Bình Minh   Việt Nam    000001/HC… 4              2012-03-27 00:00:00\n2 Trần Thủy Cần        Việt Nam    000001/KG… 4              2012-05-08 00:00:00\n3 Trần Thị Phương Thu  Việt Nam    000002/HC… 4              2012-03-27 00:00:00\n4 Nguyễn Thị Minh Tâm  Việt Nam    0000027/H… 4              2014-04-18 00:00:00\n5 Nguyễn Thái Thảo Ng… Việt Nam    000003/HC… 4              2012-04-06 00:00:00\n6 ĐẶNG HOÀNG ANH       None        000004/CM… 16             2012-11-22 00:00:00\n# ℹ 4 more variables: TenPhamViHoatDong <chr>, TinhTrang <chr>, TenCoSo <chr>,\n#   DiaChiCS <chr>\n```\n:::\n:::\n\n\n::: callout-important\n### Lưu ý\n\nGiá trị của một đối tượng **có thể bị ghi đè** bất kỳ lúc nào bằng cách chạy lệnh gán để định nghĩa lại giá trị của nó. Do đó, **thứ tự của các lệnh được chạy rất quan trọng**.\n:::\n\nLệnh sau sẽ định nghĩa lại giá trị cho đối tượng `life_exp_path`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_exp_path <- \"data/new_path.xlsx\"\n\n# kiểm tra giá trị \nlife_exp_path\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data/new_path.xlsx\"\n```\n:::\n:::\n\n\n## Câu văn trong R\n\nCâu lệnh (command) hoặc hàm (function) chính là những câu văn trong R để giao tiếp với máy tính. Chúng ta phải học ngữ pháp của 1 câu lệnh và ý nghĩa của nó để có thể sử dụng R để ra lệnh cho máy tính. Một câu lệnh trong R thường có dạng như sau:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntên-câu-lệnh(tên-tham-số = data-đầu-vào hoặc lựa-chọn)\n```\n:::\n\n\n-   Tên câu lệnh: nằm trước dấu `()`, thể hiện ý nghĩa câu lệnh dùng để làm gì.\n-   Tên tham số (argument): nằm trong dấu `()` là những tham số của câu lệnh đó. Tham số là những yêu cầu nhỏ và cụ thể để máy tính hiểu rõ hơn yêu cầu của người dùng.\n-   Dấu `=`: dùng để gán 1 giá trị cho tham số. Giá trị gán cho tham số có thể là một data đầu vào, hoặc một lựa chọn của người dùng (đúng/sai).\n\n**VD**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x = life_exp_df$GDP, na.rm = TRUE)\n```\n:::\n\n\n-   Tên câu lệnh là `mean`: chúng ta đang yêu cầu máy tính hãy tính giá trị trung bình của 1 biến.\n-   Các tham số là `x` và `na.rm`:\n    -   `x`: là data đầu vào, ở đây chúng ta viết `x = life_exp_df$GDP` để cho máy tính biết data đầu vào là cột `GDP` trong bảng data `life_exp_df`.\n    -   `na.rm`: là yêu cầu cụ thể cách giải quyết khi gặp missing value (NA), ở đây chúng ta lựa chọn `na.rm = TRUE` nghĩa là nếu cột `GDP` có NA thì bỏ những giá trị NA đi trước khi tính trung bình.\n\n::: callout-tip\nĐể đọc hướng dẫn sử dụng về câu lệnh, gõ `?tên-câu-lệnh`.\n:::\n\n## Loại dữ liệu (datatype)\n\n### Các datatype trong R\n\n| Datatype     | Ý nghĩa                                                                                                                    |\n|-----------------|-------------------------------------------------------|\n| `numeric`    | dữ liệu dạng số nguyên                                                                                                     |\n| `double`     | dữ liệu dạng số thập phân                                                                                                  |\n| `logical`    | dữ liệu dạng đúng/sai (TRUE/FALSE)                                                                                         |\n| `character`  | dữ liệu dạng ký tự (hay còn gọi là string), được đặt trong dấu ngoặc kép. Đối tượng dạng ký tự thì **không thể tính toán** |\n| `Date`       | dữ liệu ngày tháng                                                                                                         |\n| `factor`     | dữ liệu dạng phân loại (categorical)                                                                                       |\n| `data.frame` | dữ liệu dạng bảng                                                                                                          |\n| `tibble`     | dữ liệu dạng bảng tương tự như data.frame, sự khác biệt chính là tibble in đẹp hơn trong R console                         |\n\n::: callout-tip\nĐể kiểm tra datatype, sử dụng lệnh `class(tên_đối_tượng)`\n:::\n\n### Chuyển đổi datatype {#update_datatype}\n\nCú pháp chung cho thay đổi datatype là `as.datatype()`\n\nVí dụ như:\n\n-   `as.numeric()` chuyển thành định dạng số.\n\n-   `as.character()` chuyển thành định dạng văn bản.\n\n-   `as.factor()` chuyển thành định dạng factor.\n\n-   `as.Date()` chuyển thành định dạng ngày.\n\nNgoài ra, còn có các lệnh khác để phục vụ cho các mục đích cụ thể hơn, bao gồm:\\\n`ifelse()` chuyển thành định dạng logical theo điều kiện nhất định\\\n`is.na()` chuyển thành định dạng logical, các dữ liệu trống (`NA`) có giá trị `TRUE` và ngược lại.\\\n`dmy()`, `ymd()`, `mdy()`, ... chuyển đổi string theo các format khác nhau thành định dạng ngày\n\n**VD**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tạo danh sách mẫu\nexample_list <- c(\"1\", \"2\", \"3\", \"4\", \"5\")\n# thử sử dụng lệnh mean\nmean(example_list)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in mean.default(example_list): argument is not numeric or logical:\nreturning NA\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\n# kiểm tra datatype \nclass(example_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# TODO: thực hành điều chỉnh example_list để không còn Warning\n```\n:::\n\n\n## Làm việc với data.frame {#sec-df-row-col}\n\n### Lấy dữ liệu theo hàng/cột\n\n-   Cú pháp: `tên_bảng_dữ_liệu[hàng, cột]`. Trong đó cột có thể là số thứ tự của cột hoặc tên cột.\n\n-   Để lấy toàn bộ hàng thì để trống cột và ngược lại\n\n-   Để lấy nhiều cột hay hàng thì cho tên cột hay hàng theo dạng list (chuỗi)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# lấy dữ liệu tại hàng thứ 5, cột thứ 2\nlife_exp_df[5 ,2]\n\n# lấy dữ liệu tại hàng thứ 5, cột thứ 2\nlife_exp_df[5 , \"Country\"]\n\n# lấy hàng thứ 5 trong bảng df\nlife_exp_df[5, ]\n\n#lấy các cột Country, Year, GDP\nlife_exp_df[, c(\"Country\", \"Year\", \"GDP\")] \n\n#lấy 10 hàng đầu tiên của các cột Country, Year, GDP\n#1:10 là cú pháp nhanh để tạo chuỗi từ 1 đến 10\nlife_exp_df[1:10, c(\"Country\", \"Year\", \"GDP\")] \n```\n:::\n\n\n::: callout-tip\n### Xem tên các cột {.callout-tip}\n\nLệnh `colnames` được sử dụng để xem danh sách tên các cột trong bảng\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(life_exp_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Country\"                         \"Year\"                           \n [3] \"Status\"                          \"Life expectancy\"                \n [5] \"Adult Mortality\"                 \"infant deaths\"                  \n [7] \"Alcohol\"                         \"percentage expenditure\"         \n [9] \"Hepatitis B\"                     \"Measles\"                        \n[11] \"BMI\"                             \"under-five deaths\"              \n[13] \"Polio\"                           \"Total expenditure\"              \n[15] \"Diphtheria\"                      \"HIV/AIDS\"                       \n[17] \"GDP\"                             \"Population\"                     \n[19] \"thinness  1-19 years\"            \"thinness 5-9 years\"             \n[21] \"Income composition of resources\" \"Schooling\"                      \n```\n:::\n:::\n\n:::\n\n::: callout-note\nĐối với cột, còn có cách trích xuất thông dụng khác bằng cách sử dụng dấu `$`. Tuy nhiên, cách này sẽ chỉ trích xuất giá trị trong 1 cột.\\\n**VD**: `df$col1` sẽ trả về các giá trị trong cột `col1` của bảng `df`\n:::\n\n### Chuyển đổi datatype cho cột\n\nMỗi cột trong data.frame sẽ chứa các giá trị có cùng datatype.\n\nĐể thay đổi datatype của cột, ta có thể áp dụng các [function từ phần trước](#update_datatype).\n\n**VD**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# đổi cột Status thành biến phân loại\nlife_exp_df$Status <- as.factor(life_exp_df$Status)\n```\n:::\n\n\n::: callout-important\n#### Lưu ý\n\n-   Dấu `<-` được sử dụng ở VD trên để **gán giá trị mới** vào cột Country (tương đương việc UPDATE cột)\n\n-   Nếu không sử dụng `<-` thì R chỉ trả về kết quả của function `as.factor` và bảng df sẽ **không** có thay đổi\n:::\n\n### Lọc dữ liệu {#sec-filter-condition}\n\nFunction `filter()` được sử dụng cho việc lọc dữ liệu theo điều kiện\\\nMột số ký tự thường được sử dụng để quy định điều kiện bao gồm:\n\n| Ký tự      | Ý nghĩa               |\n|------------|-----------------------|\n| `x == y`   | x bằng y              |\n| `x != y`   | x không bằng y        |\n| `y < x`    | x nhỏ hơn y           |\n| `y <= x`   | x nhỏ hơn hoặc bằng y |\n| `is.na(x)` | x trống               |\n| `A & B`    | A và B                |\n| `A | B`    | A hoặc B              |\n| `!`        | Không là (NOT)        |\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Lọc các dữ liệu của Thái Lan\nlife_exp_df %>% filter(Country == \"Thailand\") %>% select(Country, Year, GDP)\n\n# Lọc các hàng có GDP năm 2015 hơn 2000\nlife_exp_df %>% filter(Year == 2015 & GDP > 2000) %>% select(Country, Year, GDP)\n\n# Lọc các hàng có Country là Thailand hoặc GDP > 2000\nlife_exp_df %>% filter(Country == \"Thailand\" | (GDP > 2000)) %>% select(Country, Year, GDP)\n\n# Lọc các hàng có Country là Thailand và GDP > 2000\nlife_exp_df %>% filter(Country == \"Thailand\" & (GDP > 2000)) %>% select(Country, Year, GDP)\n```\n:::\n\n\n::: callout-note\n### Dấu `%>% (pipe)` {.callout-note}\n\n`%>%` được dùng để chuyển đối tượng vào 1 function (trong VD trên, `%>%` chuyển `df` vào function `filter`)\n\n`%>%` còn thường được dùng để chuyển các kết quả trung gian sang function tiếp theo, từ đó có thể dùng để nối 1 chuỗi các function để thao tác trên 1 đối tượng\\\n\\\n**VD**: lọc các hàng có GDP \\> 2000 và sắp xếp các hàng theo GPD từ thấp đến cao\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_exp_df %>% # chuyển df vào filter()\n  filter(GDP > 2000) %>% # chuyển kết quả của filter() vào arrange()\n  arrange(GDP)\n```\n:::\n\n:::\n\n## Dữ liệu string\n\nGói `stringr` (1 trong các package trong `tidyverse`) thường được sử dụng để xử lý các dữ liệu dạng string.\n\nNgoài ra, R còn có package `stringi` dành cho các mục đích cụ thể khác (VD như xử lý dấu, cách mã hoá văn bản, ... )\n\n|                      |             |                                     |\n|----------------------|-------------|-------------------------------------|\n| **Function**         | **Package** | **Công dụng**                       |\n| `tolower`            | base        | biến thành chữ thường               |\n| `toupper`            | base        | biến thành chữ hoa                  |\n| `str_to_title`       | stringr     | in hoa chữ cái đầu tiên của từng từ |\n| `stri_trans_general` | stringi     | loại bỏ dấu                         |\n\n**VD**: xoá dấu trong cột `HoTen` của `practising_cert_df`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npractising_cert_df %>% \n  mutate(\n    HoTen = stri_trans_general(HoTen, \"latin-ascii\")\n  ) %>% \n  head() # lệnh head để trả về 6 hàng đầu tiên thay vì toàn bộ\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 9\n  HoTen                TenQuocTich SoChungChi NoiCapChungChi NgayCapChungChi    \n  <chr>                <chr>       <chr>      <chr>          <dttm>             \n1 Pham Thi Binh Minh   Việt Nam    000001/HC… 4              2012-03-27 00:00:00\n2 Tran Thuy Can        Việt Nam    000001/KG… 4              2012-05-08 00:00:00\n3 Tran Thi Phuong Thu  Việt Nam    000002/HC… 4              2012-03-27 00:00:00\n4 Nguyen Thi Minh Tam  Việt Nam    0000027/H… 4              2014-04-18 00:00:00\n5 Nguyen Thai Thao Ng… Việt Nam    000003/HC… 4              2012-04-06 00:00:00\n6 DANG HOANG ANH       None        000004/CM… 16             2012-11-22 00:00:00\n# ℹ 4 more variables: TenPhamViHoatDong <chr>, TinhTrang <chr>, TenCoSo <chr>,\n#   DiaChiCS <chr>\n```\n:::\n:::\n\n\n::: callout-note\n### Lệnh `mutate` {#sec-mutate .callout-note}\n\n`mutate` được sử dụng để chỉnh sửa giá trị của cột hoặc tạo cột mới\n:::\n\n### Các hàm thông dụng của stringr\n\n|                   |                                                                              |\n|------------------|------------------------------------------------------|\n| **Function**      | **Công dụng**                                                                |\n| `str_starts`      | lọc hàng bắt đầu bằng chuỗi ký tự khớp với pattern                           |\n| `str_ends`        | lọc hàng kết thúc bằng bằng chuỗi ký tự khớp với pattern                     |\n| `str_detect`      | lọc hàng có chứa chuỗi ký tự khớp với pattern                                |\n| `str_interp`      | chèn giá trị vào string (string interpolation)                               |\n| `str_extract`     | trích 1 chuỗi con (substring) đầu tiên khớp với pattern                      |\n| `str_extract_all` | trích tất cả các chuỗi con (substring) khớp với pattern                      |\n| `str_remove`      | xoá 1 chuỗi con (substring) đầu tiên khớp với pattern                        |\n| `str_remove_all`  | xoá tất cả các chuỗi con (substring) khớp với pattern                        |\n| `str_replace`     | thay thế 1 chuỗi con (substring) đầu tiên khớp với pattern bằng 1 chuỗi mới  |\n| `str_replace_all` | thay thế tất cả chuỗi con (substring) khớp với pattern bằng 1 chuỗi mới      |\n\n::: center-text\n[{{< fa link >}} stringr functions](https://stringr.tidyverse.org/reference/index.html){.btn .btn-outline-secondary role=\"button\"}\n:::\n\n### Regex\n\nTrong R, regex là 1 ngôn ngữ ngắn gọn để mô tả các patterns trong string\n\nCó bốn công cụ cơ bản mà người dùng có thể sử dụng để tạo một biểu thức chính quy cơ bản:\n\n-   Nhóm\n-   Bộ ký tự\n-   Siêu ký tự\n-   Bộ định lượng\n\n**Nhóm** chỉ định các chuỗi cần khớp. Thường được viết trong`()` và phân cách bởi dấu `|`\n\n*VD*: `\"(Quận|Huyện)\"` - quy định cần khớp chữ `\"Quận\"` hay `\"Huyện\"`.\n\n**Bộ ký tự** string được đánh giá khớp tìm thấy bất kỳ ký tự nào trong dấu ngoặc `[ ]` trong chuỗi. Vd, để tìm string chứa các nguyên âm, người ta có thể sử dụng bộ ký tự này: `\"[aeiou]\"`.\n\nCác bộ ký tự đặc biệt trong R\n\n| Bộ ký tự      | Ý nghĩa                                      |\n|---------------|----------------------------------------------|\n| `\"[A-Z]\"`     | bất kỳ chữ cái viết hoa đơn lẻ nào           |\n| `\"[a-z]\"`     | bất kỳ chữ cái viết thường đơn lẻ nào        |\n| `\"[0-9]\"`     | bất kỳ số nào                                |\n| `\"[:alnum:]\"` | bất kỳ chữ cái và số nào                     |\n| `\"[:digit:]\"` | bất kỳ chữ số nào                            |\n| `\"[:alpha:]\"` | bất kỳ ký tự nào (viết hoa hoặc viết thường) |\n| `\"[:upper:]\"` | bất kỳ ký tự viết hoa nào                    |\n| `\"[:lower:]\"` | bất kỳ ký tự viết thường nào                 |\n\n**Bộ định lượng** chỉ định độ dài của pattern Bộ định lượng là các số được viết trong dấu ngoặc nhọn `{ }` sau pattern mà chúng đang định lượng. Ngoài ra có 2 ký tự đặc biệt khác cho bộ định lượng, bao gồm:\n\n-   Dấu `*` : khớp khi có 0 hoặc nhiều hơn pattern được định lượng.\n\n-   Dấu `+` : khớp khi có 1 hoặc nhiều hơn pattern được định lượng.\n\n*VD*:\n\n-   `\"A{2}\"` quy định khớp khi có hai chữ cái A viết hoa.\n\n-   `\"[:digit:]{2}\"` quy định khớp khi có hai chữ số.\n\n-   `\"[:alpha:]+\"` quy định khớp khi có ít nhất 1 chữ cái.\n\n**Siêu ký tự** là phiên bản rút ngắn của 1 số bộ ký tự\n\n| Siêu ký tự | Ý nghĩa                   |\n|------------|---------------------------|\n| `\"\\\\s\"`    | khoảng trắng đơn          |\n| `\"\\\\w\"`    | tương đương \"\\[:alnum:\\]\" |\n| `\"\\\\d\"`    | tương đương \"\\[:digit:\\]\" |\n\n### Một số ví dụ sử dụng hàm của `stringr` cùng regex\n\n***VD1***: Cần tìm kiếm thông tin cho những ai có tên là Thịnh/Hằng/Diễm\n\n-   Chọn câu lệnh: cần tìm theo tên --\\> [cần kiểm tra chữ cuối]{.underline} trong string -\\>dùng lệnh `str_ends`\n\n-   Quy định pattern bằng regex: cần string khớp với 1 trong các tên nêu trên -\\> áp dụng **Nhóm**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npractising_cert_df %>% \n  filter( # gọi filter để lọc \n    str_ends( # gọi lệnh str_ends để kiểm tra các ký tự cuối của string \n      HoTen, # cần kiểm tra cột HoTen\n      \"(Thịnh|Hằng|Diễm)\" # quy định pattern cần khớp\n      )\n  ) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 920 × 9\n   HoTen               TenQuocTich SoChungChi NoiCapChungChi NgayCapChungChi    \n   <chr>               <chr>       <chr>      <chr>          <dttm>             \n 1 Nguyễn Thị Thu Hằng Việt Nam    000092/ĐT… 4              2012-04-26 00:00:00\n 2 La Hằng             Việt Nam    000119/HC… 4              2012-04-23 00:00:00\n 3 Nguyễn Văn Thịnh    Việt Nam    000152/HC… 4              2012-04-23 00:00:00\n 4 Phan Thị Thúy Diễm  None        0001586/K… 32             2013-12-12 00:00:00\n 5 Lê Thị Thu Hằng     Việt Nam    0002257/Q… 4              2015-11-20 00:00:00\n 6 Nguyễn Thị Thúy Hằ… Việt Nam    0002562/Q… 50             2016-01-22 00:00:00\n 7 Nguyễn Thị Thúy Di… None        0003849/Đ… 23             2014-11-19 00:00:00\n 8 Lê Ngọc Thịnh       Việt Nam    0004194/K… 32             2015-09-29 00:00:00\n 9 Nguyễn Đức Thịnh    Việt Nam    0004235/Đ… 4              2014-06-08 00:00:00\n10 Huỳnh Thị Hằng      Việt Nam    0004402/B… 12             2015-01-15 00:00:00\n# ℹ 910 more rows\n# ℹ 4 more variables: TenPhamViHoatDong <chr>, TinhTrang <chr>, TenCoSo <chr>,\n#   DiaChiCS <chr>\n```\n:::\n:::\n\n\n***VD 2***: cần tìm thông tin cho những ai được cấp chứng chỉ chữa bệnh chuyên khoa răng hàm mặt hoặc mắt\n\n-   Chọn câu lệnh: cần lọc các hàng có Phạm Vi Hoạt động [chứa dòng chữ]{.underline} \"răng hàm mặt\" hoặc \"mắt\" --\\> dùng lệnh `str_detect`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    practising_cert_df %>% \n      mutate(\n        # chuyển thành in thường để tránh các tình trạng không khớp vì khác case\n        TenPhamViHoatDong = tolower(TenPhamViHoatDong)\n      ) %>% \n      filter(\n        str_detect(\n          TenPhamViHoatDong, \n          \"(răng hàm mặt|mắt)\"\n        )\n      ) %>% \n      select(HoTen, TenPhamViHoatDong)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 2,575 × 2\n       HoTen                     TenPhamViHoatDong                             \n       <chr>                     <chr>                                         \n     1 Trần Thị Phương Thu       khám bệnh, chữa bệnh chuyên khoa mắt.         \n     2 Nguyễn Thái Thảo Nguyên   khám bệnh, chữa bệnh chuyên khoa răng hàm mặt.\n     3 Đoàn Thị Thùy Trang       khám bệnh, chữa bệnh chuyên khoa răng hàm mặt.\n     4 Ngô Ngọc Liêm             khám bệnh, chữa bệnh chuyên khoa mắt.         \n     5 Ngô Ngọc Liêm             khám bệnh, chữa bệnh chuyên khoa mắt.         \n     6 Trần Thu Trang            khám bệnh, chữa bệnh chuyên khoa răng hàm mặt.\n     7 Phạm Bảo Chung            khám bệnh, chữa bệnh chuyên khoa răng hàm mặt.\n     8 Võ Văn Minh Hoài          khám bệnh, chữa bệnh chuyên khoa răng hàm mặt.\n     9 Nguyễn Thành Tung Ái Quốc khám bệnh, chữa bệnh chuyên khoa mắt.         \n    10 Đoàn Thị Thúy Hòa         khám bệnh, chữa bệnh chuyên khoa răng hàm mặt.\n    # ℹ 2,565 more rows\n    ```\n    :::\n    :::\n\n\n## Dữ liệu ngày tháng\n\nĐối với dữ liệu dạng ngày tháng, package thông dụng nhất là `lubridate` (cũng là 1 phần của tidyverse).\n\n### Các lệnh liên quan đến ngày tháng\n\n| Function            | Công dụng                                           | Package   |\n|-----------------|--------------------------------------|-----------------|\n| `difftime`          | tính khoảng cách giữa hai mốc thời gian             | base      |\n| `month`/`year`      | lấy tháng/ năm                                      | lubridate |\n| `quarter`           | chuyển ngày sang quý                                | lubridate |\n| `today`             | lấy ngày hiện tại                                   | lubridate |\n| `dmy`, `ymd`, `mdy` | chuyển string theo nhiều format khác nhau sang ngày | lubridate |\n\n::: center-text\n[{{< fa link >}} lubridate functions](https://lubridate.tidyverse.org/reference/index.html){.btn .btn-outline-secondary role=\"button\"}\n:::\n\n**VD**: cần tìm những ai được cấp chứng chỉ hành nghề trong vòng 5 năm gần đây\n\n-   Cần lấy ngày hiện tại để tính toán --\\> dùng lệnh `today()`\n\n-   Cần tính khoảng thời gian từ lúc cấp chứng chỉ đến hiện tại -\\> dùng lệnh `difftime()` với unit là days (difftime không có unit year) sau đó chia cho 365\n\n    [hoặc]{.underline} dùng lệnh `year` để lấy năm của 2 mốc thời gian rồi trừ nhau\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --- Cách 1\npractising_cert_df %>% \n  filter(\n    # gọi difftime để tính khoảng cách thời gian\n    difftime(today(), NgayCapChungChi, units = \"days\")/365 <= 5\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 44 × 9\n   HoTen               TenQuocTich SoChungChi NoiCapChungChi NgayCapChungChi    \n   <chr>               <chr>       <chr>      <chr>          <dttm>             \n 1 Nguyễn Cẩm Tú       Việt Nam    001982/LA… 39             2019-09-27 00:00:00\n 2 Nguyễn Hoàng Thùy … Việt Nam    0027044    4              2019-03-26 00:00:00\n 3 NGUYỄN ĐĂNG GIÁP    None        003982/QB… 46             2019-09-15 00:00:00\n 4 Nguyễn Thị Anh Thư  Việt Nam    004856/QN… 48             2019-04-16 00:00:00\n 5 Nguyễn Thị Thanh H… Việt Nam    006349/BĐ… 12             2019-03-26 00:00:00\n 6 Đỗ Thị Thái         Việt Nam    006353/BĐ… 12             2019-03-26 00:00:00\n 7 Trần Thảo Quyên     Việt Nam    007945/ĐN… 3              2019-03-28 00:00:00\n 8 Phan Thanh Duy      Việt Nam    008141/ĐL… 19             2019-05-18 00:00:00\n 9 Quách Thị Bích Vân  Việt Nam    011513/ĐN… 22             2019-04-18 00:00:00\n10 BISET JEAN-FRANCOI… Pháp        039596/BY… 64             2019-03-29 00:00:00\n# ℹ 34 more rows\n# ℹ 4 more variables: TenPhamViHoatDong <chr>, TinhTrang <chr>, TenCoSo <chr>,\n#   DiaChiCS <chr>\n```\n:::\n\n```{.r .cell-code}\n# --- Cách 2\npractising_cert_df %>% \n  filter(\n    # Gọi year để lấy năm sau đó trừ nhau\n    year(today()) - year(NgayCapChungChi)  <= 5\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 77 × 9\n   HoTen               TenQuocTich SoChungChi NoiCapChungChi NgayCapChungChi    \n   <chr>               <chr>       <chr>      <chr>          <dttm>             \n 1 TRẦN QUỐC KHƯƠNG    Việt Nam    0003464/V… 61             2019-01-31 00:00:00\n 2 Nguyễn Cẩm Tú       Việt Nam    001982/LA… 39             2019-09-27 00:00:00\n 3 Nguyễn Hoàng Thùy … Việt Nam    0027044    4              2019-03-26 00:00:00\n 4 Nguyễn Hoàng Anh Tú Việt Nam    003457/TV… 59             2019-01-25 00:00:00\n 5 NGUYỄN ĐĂNG GIÁP    None        003982/QB… 46             2019-09-15 00:00:00\n 6 Nguyễn Cảnh Lộc     Việt Nam    004854/GL… 24             2019-02-28 00:00:00\n 7 Nguyễn Thị Anh Thư  Việt Nam    004856/QN… 48             2019-04-16 00:00:00\n 8 Nguyễn Thị Thanh H… Việt Nam    006349/BĐ… 12             2019-03-26 00:00:00\n 9 Đỗ Thị Thái         Việt Nam    006353/BĐ… 12             2019-03-26 00:00:00\n10 Trần Hữu Nghĩa      Việt Nam    006869     47             2019-01-10 00:00:00\n# ℹ 67 more rows\n# ℹ 4 more variables: TenPhamViHoatDong <chr>, TinhTrang <chr>, TenCoSo <chr>,\n#   DiaChiCS <chr>\n```\n:::\n:::\n\n\nTrong 2 ví dụ trên, cách 1 sẽ chính xác hơn vì ta tính cả ngày/tháng khi sử dụng difftime còn cách 2 chỉ lấy 2 năm trừ nhau\n\n## Lưu bảng dữ liệu sau khi chỉnh sửa\n\nR cho phép lưu lại dữ liệu với nhiều format khác nhau, bao gồm:\n\n-   RData - định dạng dữ liệu của R để lưu trữ nhiều đối tượng\n\n-   RDS - định dạng dữ liệu của R để lưu trữ 1 đối tượng\n\n-   excel\n\n::: callout-important\n### Lưu ý\n\nTốc độ đọc file RData và RDS của R nhanh hơn rất nhiều so với việc đọc file excel.\\\nVì vậy, đối với các dữ liệu có số lượng lớn hoặc cần xử lý thêm trong R, nên lưu trữ dưới dạng RDS/Rdata.\n:::\n\n**VD:** lưu dữ liệu\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# định nghĩa đường dẫn đến folder chứa data\ndata_path <- file.path(getwd(), \"data\")\n\n# lưu dưới dạng Rdata\nsave(df, file = file.path(data_path, \"rda_data.Rda\"))\n\n# lưu dưới dạng RDS\nsaveRDS(df, file = file.path(data_path, \"rds_data.Rds\"))\n\n# lưu dưới dạng file excel\nwrite_xlsx(df, path = file.path(data_path, \"excel_data.xlsx\"))\n```\n:::\n\n\nĐọc dữ liệu được lưu\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# đọc file Rdata\nload(file.path(data_path, \"rda_data.Rda\"))\n\n# đọc file RDS\nreadRDS(file = file.path(data_path, \"rds_data.Rds\"))\n\n# đọc file excel\nread_excel(df, path = file.path(data_path, \"excel_data.xlsx\"))\n```\n:::\n",
    "supporting": [
      "r_basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}