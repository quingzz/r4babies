{
  "hash": "e6d96c7a9f1ff34d22ec374dc8e8af53",
  "result": {
    "markdown": "# Nhập môn R\n\n::: callout-tip\n# Mục tiêu\n\n1.  Hiểu các thuật ngữ trong R\n2.  Hiểu các datatype trong R\n3.  Học các package thông dụng trong R\n:::\n\n::: callout-note\n# Các package được sử dụng trong bài học\n\n-   readxl\n\n-   writexl\n\n-   tidyverse\n:::\n\n### Gọi các thư viện cho bài học\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(writexl)\n```\n:::\n\n\n::: callout-note\n### Package tidyverse\n\npackage tidyverse bao hàm nhiều package hỗ trợ trong việc phân tích dữ liệu, bao gồm các package sau: ggplot2, tibble, dplyr, tidyr, stringr, purrr, readr, forcats, lubridate\\\n\\\nVì vậy người dùng không cần gọi các thư viện trên sau khi gọi tidyverse\n:::\n\n## Đối tượng trong R\n\nMọi thứ được lưu trữ trong R - bao gồm bộ dữ liệu, biến số, danh sách tên cột, kết quả đầu ra như biểu đồ - đều là **các đối tượng**, được **gán tên** và **có thể được tham chiếu** trong các lệnh sau đó.\n\nĐể tạo đối tượng trong R, ta dùng cú pháp sau\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntên_đối_tượng <- giá_trị_của_đối_tượng \n```\n:::\n\n\nVD:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tạo đối tượng file_path để lưu trữ đường dẫn đến file excel\nfile_path <- \"data/gdp-capita.xlsx\"\n\n# tạo đối tượng df lưu trữ bảng dữ liệu đọc từ file excel\ndf <- read_excel(path = file_path, sheet = 1)\n```\n:::\n\n\nSau khi tạo 2 đối tượng file_path và df, ta có thể thử xem giá trị được lưu trữ\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_path\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data/gdp-capita.xlsx\"\n```\n:::\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 266 × 10\n   `Country Name`       `Country Code` `2015` `2016` `2017` `2018` `2019` `2020`\n   <chr>                <chr>           <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 Aruba                ABW            28419. 28450. 29329. 30918. 31903. 24008.\n 2 Africa Eastern and … AFE             1554.  1444.  1625.  1558.  1508.  1356.\n 3 Afghanistan          AFG              567.   523.   526.   492.   498.   512.\n 4 Africa Western and … AFW             1882.  1649.  1590.  1735.  1812.  1688.\n 5 Angola               AGO             3217.  1810.  2439.  2541.  2191.  1451.\n 6 Albania              ALB             3953.  4124.  4531.  5288.  5396.  5343.\n 7 Andorra              AND            38886. 39931. 40632. 42905. 41329. 37207.\n 8 Arab World           ARB             6287.  6118.  6231.  6579.  6505.  5644.\n 9 United Arab Emirates ARE            41525. 41055. 43064. 46722. 45376. 37629.\n10 Argentina            ARG            13789. 12790. 14613. 11795.  9964.  8501.\n# ℹ 256 more rows\n# ℹ 2 more variables: `2021` <dbl>, `2022` <dbl>\n```\n:::\n:::\n\n\n::: callout-important\n### Lưu ý\n\nGiá trị của một đối tượng **có thể bị ghi đè** bất kỳ lúc nào bằng cách chạy lệnh gán để định nghĩa lại giá trị của nó. Do đó, **thứ tự của các lệnh được chạy rất quan trọng**.\n:::\n\nLệnh sau sẽ định nghĩa lại giá trị cho đối tượng `file_path`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_path <- \"data/new_path.xlsx\"\n\n# kiểm tra giá trị \nfile_path\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data/new_path.xlsx\"\n```\n:::\n:::\n\n\n## Câu văn trong R\n\nCâu lệnh (command) hoặc hàm (function) chính là những câu văn trong R để giao tiếp với máy tính. Chúng ta phải học ngữ pháp của 1 câu lệnh và ý nghĩa của nó để có thể sử dụng R để ra lệnh cho máy tính. Một câu lệnh trong R thường có dạng như sau:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntên-câu-lệnh(tên-tham-số = data-đầu-vào hoặc lựa-chọn)\n```\n:::\n\n\n-   Tên câu lệnh: nằm trước dấu `()`, thể hiện ý nghĩa câu lệnh dùng để làm gì.\n-   Tên tham số (argument): nằm trong dấu `()` là những tham số của câu lệnh đó. Tham số là những yêu cầu nhỏ và cụ thể để máy tính hiểu rõ hơn yêu cầu của người dùng.\n-   Dấu `=`: dùng để gán 1 giá trị cho tham số. Giá trị gán cho tham số có thể là một data đầu vào, hoặc một lựa chọn của người dùng (đúng/sai).\n\nVí dụ:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x = df$col1, na.rm = TRUE)\n```\n:::\n\n\n-   Tên câu lệnh là `mean`: chúng ta đang yêu cầu máy tính hãy tính giá trị trung bình của 1 biến.\n-   Các tham số là `x` và `na.rm`:\n    -   `x`: là data đầu vào, ở đây chúng ta viết `x = df$col1` để cho máy tính biết data đầu vào là cột `col1` trong bảng data `df`.\n    -   `na.rm`: là yêu cầu cụ thể cách giải quyết khi gặp missing value (NA), ở đây chúng ta lựa chọn `na.rm = TRUE` nghĩa là nếu cột `col1` có NA thì bỏ những giá trị NA đi trước khi tính trung bình.\n\n::: callout-tip\nĐể đọc hướng dẫn sử dụng về câu lệnh, gõ `?tên-câu-lệnh`.\n:::\n\n## Loại dữ liệu (datatype)\n\n### Các datatype trong R\n\n| Datatype     | Ý nghĩa                                                                                                                    |\n|--------------------------|----------------------------------------------|\n| `numeric`    | dữ liệu dạng số nguyên                                                                                                     |\n| `double`     | dữ liệu dạng số thập phân                                                                                                  |\n| `logical`    | dữ liệu dạng đúng/sai (TRUE/FALSE)                                                                                         |\n| `character`  | dữ liệu dạng ký tự (hay còn gọi là string), được đặt trong dấu ngoặc kép. Đối tượng dạng ký tự thì **không thể tính toán** |\n| `Date`       | dữ liệu ngày tháng                                                                                                         |\n| `factor`     | dữ liệu dạng phân loại (categorical)                                                                                       |\n| `data.frame` | dữ liệu dạng bảng                                                                                                          |\n| `tibble`     | dữ liệu dạng bảng tương tự như data.frame, sự khác biệt chính là tibble in đẹp hơn trong R console                         |\n\n::: callout-tip\nĐể kiểm tra datatype, sử dụng lệnh `class(tên_đối_tượng)`\n:::\n\n### Chuyển đổi datatype {#update_datatype}\n\nCú pháp chung cho thay đổi datatype là `as.datatype()`\n\nVí dụ như:\n\n-   `as.numeric()` chuyển thành định dạng số.\n\n-   `as.character()` chuyển thành định dạng văn bản.\n\n-   `as.factor()` chuyển thành định dạng factor.\n\n-   `as.Date()` chuyển thành định dạng ngày.\n\nNgoài ra, còn có các lệnh khác để phục vụ cho các mục đích cụ thể hơn, bao gồm:\\\n`ifelse()` chuyển thành định dạng logical theo điều kiện nhất định\\\n`is.na()` chuyển thành định dạng logical, các dữ liệu trống (`NA`) có giá trị `TRUE` và ngược lại.\\\n`dmy()`, `ymd()`, `mdy()`, ... chuyển đổi string theo các format khác nhau thành định dạng ngày\n\nVD:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tạo danh sách mẫu\nexample_list <- c(\"1\", \"2\", \"3\", \"4\", \"5\")\n# thử sử dụng lệnh mean\nmean(example_list)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in mean.default(example_list): argument is not numeric or logical:\nreturning NA\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\n# kiểm tra datatype \nclass(example_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# TODO: thực hành điều chỉnh example_list để không còn Warning\n```\n:::\n\n\n## Làm việc với data.frame\n\n### Lấy dữ liệu theo hàng/cột\n\n-   Cú pháp: `tên_bảng_dữ_liệu[hàng, cột]`. Trong đó cột có thể là số thứ tự của cột hoặc tên cột.\n\n-   Để lấy toàn bộ hàng thì để trống cột và ngược lại\n\n-   Để lấy nhiều cột hay hàng thì cho tên cột hay hàng theo dạng list (chuỗi)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# lấy dữ liệu tại hàng thứ 5, cột thứ 2\ndf[5 ,2]\n\n# lấy dữ liệu tại hàng thứ 5, cột thứ 2\ndf[5 , \"Country Code\"]\n\n# lấy hàng thứ 5 trong bảng df\ndf[5, ]\n\n#lấy các cột Country Name, Country Code, 2015\ndf[, c(\"Country Name\", \"Country Code\", \"2015\")] \n\n#lấy 10 hàng đầu tiên của các cột Country Name, Country Code, 2015\n#1:10 là cú pháp nhanh để tạo chuỗi từ 1 đến 10\ndf[1:10, c(\"Country Name\", \"Country Code\", \"2015\")] \n```\n:::\n\n\n::: callout-note\nĐối với cột, còn có cách trích xuất thông dụng khác bằng cách sử dụng dấu `$`. Tuy nhiên, cách này sẽ chỉ trích xuất giá trị trong 1 cột.\\\nVD: `df$col1` sẽ trả về các giá trị trong cột `col1` của bảng `df`\n:::\n\n### Chuyển đổi datatype cho cột\n\nMỗi cột trong data.frame sẽ chứa các giá trị có cùng datatype.\n\nĐể thay đổi datatype của cột, ta có thể áp dụng các [function từ phần trước](#update_datatype).\n\nVD:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# đổi cột country code thành biến phân loại\ndf$`Country Code` <- as.factor(df$`Country Code`)\n```\n:::\n\n\n::: callout-important\n#### Lưu ý\n\n-   Dấu `<-` được sử dụng ở VD trên để **gán giá trị mới** vào cột Country Code (tương đương việc UPDATE cột)\n\n-   Nếu không sử dụng `<-` thì R chỉ trả về kết quả của function `as.factor` và bảng df sẽ **không** có thay đổi\n:::\n\n### Lọc dữ liệu\n\nFunction `filter()` được sử dụng cho việc lọc dữ liệu theo điều kiện\\\nMột số ký tự thường được sử dụng cho filter bao gồm:\n\n| Ký tự      | Ý nghĩa               |\n|------------|-----------------------|\n| `x == y`   | x bằng y              |\n| `x != y`   | x không bằng y        |\n| `y < x`    | x nhỏ hơn y           |\n| `y <= x`   | x nhỏ hơn hoặc bằng y |\n| `is.na(x)` | x trống               |\n| `A & B`    | A và B                |\n| `A | B`    | A hoặc B              |\n| `!`        | Không là (NOT)        |\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Lọc các hàng có country code là ABW\ndf %>% filter(`Country Code` == \"ABW\") \n\n# Lọc các hàng có GDP năm 2015 hơn 2000\ndf %>% filter(`2015` > 2000)\n\n# Lọc các hàng có country code là ABW hoặc GDP năm 2015 hơn 2000\ndf %>% filter((`Country Code` == \"ABW\") | (`2015` > 2000))\n\n# Lọc các hàng có country code là ABW và GDP năm 2015 hơn 2000\ndf %>% filter((`Country Code` == \"ABW\") & (`2015` > 2000))\n```\n:::\n\n\n::: callout-note\n### Dấu `%>% (pipe)` {.callout-note}\n\n`%>%` được dùng để chuyển đối tượng vào 1 function (trong VD trên, `%>%` chuyển `df` vào function `filter`)\n\n`%>%` còn thường được dùng để chuyển các kết quả trung gian sang function tiếp theo, từ đó có thể dùng để nối 1 chuỗi các function để thao tác trên 1 đối tượng\\\n\\\nVD: lọc các hàng có GDP năm 2015 \\> 2000 và sắp xếp các hàng theo GPD từ thấp đến cao\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% # chuyển df vào filter()\n  filter(`2015` > 2000) %>% # chuyển kết quả của filter() vào arrange()\n  arrange(`2015`)\n```\n:::\n\n:::\n\n## Dữ liệu string\n\nGói `stringr` (1 trong các package trong `tidyverse`) thường được sử dụng để xử lý các dữ liệu dạng string.\n\nNgoài ra, R còn có package `stringi` dành cho các mục đích cụ thể khác (VD như xử lý dấu, cách mã hoá văn bản, ... )\n\n|                      |             |                                     |\n|----------------------|-------------|-------------------------------------|\n| **Function**         | **Package** | **Công dụng**                       |\n| `tolower`            | base        | biến thành chữ thường               |\n| `toupper`            | base        | biến thành chữ hoa                  |\n| `str_to_title`       | stringr     | in hoa chữ cái đầu tiên của từng từ |\n| `stri_trans_general` | stringi     | loại bỏ dấu                         |\n\nVD: chuyển Country code sang chữ in thường\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  mutate(\n    `Country Code` = tolower(`Country Code`)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 266 × 10\n   `Country Name`       `Country Code` `2015` `2016` `2017` `2018` `2019` `2020`\n   <chr>                <chr>           <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 Aruba                abw            28419. 28450. 29329. 30918. 31903. 24008.\n 2 Africa Eastern and … afe             1554.  1444.  1625.  1558.  1508.  1356.\n 3 Afghanistan          afg              567.   523.   526.   492.   498.   512.\n 4 Africa Western and … afw             1882.  1649.  1590.  1735.  1812.  1688.\n 5 Angola               ago             3217.  1810.  2439.  2541.  2191.  1451.\n 6 Albania              alb             3953.  4124.  4531.  5288.  5396.  5343.\n 7 Andorra              and            38886. 39931. 40632. 42905. 41329. 37207.\n 8 Arab World           arb             6287.  6118.  6231.  6579.  6505.  5644.\n 9 United Arab Emirates are            41525. 41055. 43064. 46722. 45376. 37629.\n10 Argentina            arg            13789. 12790. 14613. 11795.  9964.  8501.\n# ℹ 256 more rows\n# ℹ 2 more variables: `2021` <dbl>, `2022` <dbl>\n```\n:::\n:::\n\n\n::: callout-note\n### Lệnh `mutate` {.callout-note}\n\n`mutate` được sử dụng để chỉnh sửa giá trị của cột hoặc tạo cột mới\n:::\n\n### Các hàm thông dụng của stringr\n\n|                 |                                                                              |\n|-----------------------|-------------------------------------------------|\n| **Function**    | **Công dụng**                                                                |\n| str_starts      | lọc hàng bắt đầu bằng chuỗi ký tự khớp với pattern                           |\n| str_ends        | lọc hàng kết thúc bằng bằng chuỗi ký tự khớp với pattern                     |\n| str_detect      | lọc hàng có chứa chuỗi ký tự khớp với pattern                                |\n| str_interp      | chèn giá trị vào string (string interpolation)                               |\n| str_extract     | trích 1 chuỗi con (substring) đầu tiên khớp với pattern                      |\n| str_extract_all | trích tất cả các chuỗi con (substring) khớp với pattern                      |\n| str_remove      | xoá 1 chuỗi con (substring) đầu tiên khớp với pattern                        |\n| str_remove_all  | xoá tất cả các chuỗi con (substring) khớp với pattern                        |\n| str_replace     | thay thế 1 chuỗi con (substring) đầu tiên khớp với pattern bằng 1 chuỗi mới  |\n| str_replace_all | thay thế tất cả chuỗi con (substring) khớp với pattern bằng 1 chuỗi mới      |\n\n::: center-text\n[{{< fa link >}} stringr functions](https://stringr.tidyverse.org/reference/index.html){.btn .btn-outline-secondary role=\"button\"}\n:::\n\n### Regex\n\nTrong R, regex là 1 ngôn ngữ ngắn gọn để mô tả các patterns trong string\n\nCó bốn công cụ cơ bản mà người dùng có thể sử dụng để tạo một biểu thức chính quy cơ bản:\n\n-   Nhóm\n\n\n```{=html}\n<!-- -->\n```\n\n-   Bộ ký tự\n\n-   Siêu ký tự\n\n-   Bộ định lượng\n\n**Nhóm** chỉ định các chuỗi cần khớp. Thường được viết trong`()` và phân cách bởi dấu `|` VD: `\"(Quận|Huyện)\"` - quy định cần khớp chữ `\"Quận\"` hay `\"Huyện\"`.\n\n**Bộ ký tự** string được đánh giá khớp tìm thấy bất kỳ ký tự nào trong dấu ngoặc `[ ]` trong chuỗi. Vd, để tìm string chứa các nguyên âm, người ta có thể sử dụng bộ ký tự này: `\"[aeiou]\"`.\n\nCác bộ ký tự đặc biệt trong R\n\n| Bộ ký tự      | Ý nghĩa                                      |\n|---------------|----------------------------------------------|\n| `\"[A-Z]\"`     | bất kỳ chữ cái viết hoa đơn lẻ nào           |\n| `\"[a-z]\"`     | bất kỳ chữ cái viết thường đơn lẻ nào        |\n| `\"[0-9]\"`     | bất kỳ số nào                                |\n| `\"[:alnum:]\"` | bất kỳ chữ cái và số nào                     |\n| `\"[:digit:]\"` | bất kỳ chữ số nào                            |\n| `\"[:alpha:]\"` | bất kỳ ký tự nào (viết hoa hoặc viết thường) |\n| `\"[:upper:]\"` | bất kỳ ký tự viết hoa nào                    |\n| `\"[:lower:]\"` | bất kỳ ký tự viết thường nào                 |\n\n**Siêu ký tự** là phiên bản rút ngắn của 1 số bộ ký tự\n\n| Siêu ký tự | Ý nghĩa                   |\n|------------|---------------------------|\n| `\"\\\\s\"`    | khoảng trắng đơn          |\n| `\"\\\\w\"`    | tương đương \"\\[:alnum:\\]\" |\n| `\"\\\\d\"`    | tương đương \"\\[:digit:\\]\" |\n\n## Dữ liệu ngày tháng\n\nĐối với dữ liệu dạng ngày tháng, package thông dụng nhất là `lubridate` (cũng là 1 phần của tidyverse).\n\n### Các lệnh liên quan đến ngày tháng\n\n| Function            | Công dụng                                           | Package   |\n|------------------|------------------------------------|------------------|\n| difftime()          | tính khoảng cách giữa hai mốc thời gian             | base      |\n| month()/year()      | lấy tháng/ năm                                      | lubridate |\n| quarter()           | chuyển ngày sang quý                                | lubridate |\n| today()             | lấy ngày hiện tại                                   | lubridate |\n| dmy(), ymd(), mdy() | chuyển string theo nhiều format khác nhau sang ngày | lubridate |\n\n::: center-text\n[{{< fa link >}} lubridate functions](https://lubridate.tidyverse.org/reference/index.html){.btn .btn-outline-secondary role=\"button\"}\n:::\n\n## Lưu bảng dữ liệu sau khi chỉnh sửa\n\nR cho phép lưu lại dữ liệu với nhiều format khác nhau, bao gồm:\n\n-   RData - định dạng dữ liệu của R để lưu trữ nhiều đối tượng\n\n-   RDS - định dạng dữ liệu của R để lưu trữ 1 đối tượng\n\n-   excel\n\n::: callout-important\n### Lưu ý\n\nTốc độ đọc file RData và RDS của R nhanh hơn rất nhiều so với việc đọc file excel.\\\nVì vậy, đối với các dữ liệu có số lượng lớn hoặc cần xử lý thêm trong R, nên lưu trữ dưới dạng RDS/Rdata.\n:::\n\nVD lưu dữ liệu\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# định nghĩa đường dẫn đến folder chứa data\ndata_path <- file.path(getwd(), \"data\")\n\n# lưu dưới dạng Rdata\nsave(df, file = file.path(data_path, \"rda_data.Rda\"))\n\n# lưu dưới dạng RDS\nsaveRDS(df, file = file.path(data_path, \"rds_data.Rds\"))\n\n# lưu dưới dạng file excel\nwrite_xlsx(df, path = file.path(data_path, \"excel_data.xlsx\"))\n```\n:::\n\n\nĐọc dữ liệu được lưu\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# đọc file Rdata\nload(file.path(data_path, \"rda_data.Rda\"))\n\n# đọc file RDS\nreadRDS(file = file.path(data_path, \"rds_data.Rds\"))\n\n# đọc file excel\nread_excel(df, path = file.path(data_path, \"excel_data.xlsx\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}