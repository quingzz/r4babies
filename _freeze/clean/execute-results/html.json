{
  "hash": "fa1a67f659ef227672d9286138dca505",
  "result": {
    "markdown": "# Làm sạch (p2)\n\nBước đầu tiên sau khi đọc được dữ liệu vào R là \"làm sạch\" dữ liệu (clean data). Chúng ta chỉ tiến hành phân tích khi chắc chắn dữ liệu đã \"sạch\" và chính xác.\n\n::: callout-tip\n# Mục tiêu\n\n1.  Hiểu khái niệm dữ liệu gọn gàng\n\n2.  Hiểu cách sử dụng các lệnh join\n\n3.  Học các cách xử lý dữ liệu lỗi\n:::\n\n::: callout-note\n# Các package được sử dụng trong bài học {.callout-note}\n\n-   readxl\n\n-   janitor\n\n-   tidyverse\n:::\n\n## Data gọn gàng (tidy data)\n\nDữ liệu gọn gàng có các đặc điểm sau:[@wickham2014]\n\n-   Mỗi biến là một cột; mỗi cột là một biến\n-   Mỗi quan sát là một hàng; mỗi hàng là một quan sát\n-   Mỗi giá trị nằm trong một ô; mỗi ô chứa một giá trị duy nhất\n\nChúng ta sẽ dùng data `gdp-capita.xlsx`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'janitor'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ndf <- read_excel(path = \"data/gdp-capita.xlsx\", sheet = 1)\n```\n:::\n\n\n### Format bảng\n\nBảng dữ liệu hiện tại chưa tuân theo quy tắc tidy data vì các cột 2015 - 2022 **không phải là biến** và **mỗi hàng đang chứa nhiều quan sát** (quan sát cho các năm từ 2015 - 2022).\n\nHiện tại bảng dữ liệu đang ở `định dạng ngang (wide)`, khi nhiều quan sát của cùng chủ thể (trong VD này là các quốc gia) được lưu trữ trong một hàng duy nhất. Điều này có thể hữu ích cho việc hiển thị, tuy nhiên không lý tưởng cho việc phân tích.\n\nĐể tuân theo quy tắc tidy data, ta cần format bảng dữ liệu sang `định dạng dọc (long)`\n\nĐể format bảng dữ liệu trong R, ta có thể sử dụng các lệnh sau.\n\n-   `pivot_longer()` - chuyển dữ liệu từ dạng ngang sang dọc.\n\n-   `pivot_wider()` - chuyển dữ liệu từ dạng dọc sang ngang.\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  pivot_longer(\n    cols = starts_with(\"2\"),\n    # đặt tên mới cho biến\n    names_to = \"year\",\n    # đặt tên mới cho cột giá trị tương ứng\n    values_to = \"gdp\")\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  `Country Name` `Country Code` year     gdp\n  <chr>          <chr>          <chr>  <dbl>\n1 Aruba          ABW            2015  28419.\n2 Aruba          ABW            2016  28450.\n3 Aruba          ABW            2017  29329.\n4 Aruba          ABW            2018  30918.\n5 Aruba          ABW            2019  31903.\n6 Aruba          ABW            2020  24008.\n```\n:::\n:::\n\n\n### Tên cột\n\nTrong R, tên cột là giá trị trên đỉnh của một cột.\n\nCác quy tắc cho tên cột thường bao gồm:\n\n-   Tên ngắn\n\n-   Không có khoảng trắng (thay thế bằng dấu gạch dưới \\_ ).\n\n-   Không có ký tự đặc biệt (&, #, \\<, \\>, ...) hoặc dấu.\n\n-   Không bắt đầu bằng số.\n\nLệnh `clean_names()` của package `janitor` được sử dụng để tự động hoá quá trình chuẩn hoá tên cột. Ngoài ra, lệnh `rename()` của package `dplyr` được sử dụng để thay đổi tên cột một cách thủ công.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# chuẩn hoá tên cột tự động\ndf <- clean_names(df)\n```\n:::\n\n\n## Kết hợp dữ liệu\n\nTrong nhiều trường hợp, dữ liệu bị chia thành nhiều bảng khác nhau và để phân tích thì chúng ta phải kết hợp các bảng lại.\n\nĐể nối 2 bảng với nhau trong R, ta sử dụng 1 trong các lệnh join của package `dplyr` sau đây\n\n| Function     | Công dụng          | GIF minh hoạ                                                                                        |\n|-----------------|-----------------|---------------------------------------|\n| left_join()  | Nối ngoài bên trái | ![](https://github.com/gadenbuie/tidyexplain/blob/main/images/left-join.gif?raw=true){width=\"283\"}  |\n| right_join() | Nối ngoài bên phải | ![](https://github.com/gadenbuie/tidyexplain/blob/main/images/right-join.gif?raw=true){width=\"282\"} |\n| inner_join() | Nối trong          | ![](https://github.com/gadenbuie/tidyexplain/blob/main/images/inner-join.gif?raw=true){width=\"281\"} |\n| full_join()  | Nối ngoài          | ![](https://github.com/gadenbuie/tidyexplain/blob/main/images/full-join.gif?raw=true){width=\"281\"}  |\n\nĐể sử dụng lệnh join, ta cần cung cấp cho R các thông tin sau:\n\n-   2 bảng cần nối\n\n-   các cột chung để nối bằng lệnh `join_by` (R mặc định nối 2 bảng bằng cột có tên giống nhau)\n\n[Tổng hợp các lệnh join cùng GIF minh hoạ](https://github.com/gadenbuie/tidyexplain/tree/main)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmt <- read_excel(path = \"data/gdp-capita.xlsx\", sheet = 2) %>% \n  clean_names()\n\n# --- Nối 2 bảng bằng lệnh left_join\n# Trong trường hợp này, tuy lệnh join_by không cần thiết nhưng có thể giúp cho code rõ ràng hơn \ndf <- left_join(df, mt, by = join_by(country_code == country_code))\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  country_name country_code year     gdp region       income_group special_notes\n  <chr>        <chr>        <chr>  <dbl> <chr>        <chr>        <chr>        \n1 Aruba        ABW          2015  28419. Latin Ameri… High income  <NA>         \n2 Aruba        ABW          2016  28450. Latin Ameri… High income  <NA>         \n3 Aruba        ABW          2017  29329. Latin Ameri… High income  <NA>         \n4 Aruba        ABW          2018  30918. Latin Ameri… High income  <NA>         \n5 Aruba        ABW          2019  31903. Latin Ameri… High income  <NA>         \n6 Aruba        ABW          2020  24008. Latin Ameri… High income  <NA>         \n# ℹ 1 more variable: table_name <chr>\n```\n:::\n:::\n\n\n## Biến đổi cột\n\n### Chọn cột\n\nNgoài cách chọn cột theo tên cơ bản như đã học ở phần @sec-df-row-col, lệnh `select` của dplyr cũng thường được sử dụng cho các cách chọn cột phức tạp hơn, bao gồm:\n\n-   Chọn cột có tên bắt đầu/kết thúc bằng chuỗi ký tự được chỉ định bằng `starts_with`/`ends_with`\n\n-   Chọn cột có tên chứa chuỗi được quy định bằng `contains`\n\n-   Dùng `where()` để áp dụng một hàm cho tất cả các cột và chọn những cột trả về giá trị TRUE\n\n-   Xoá cột bằng cách thêm dấu `-` trước tên cột\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --- Chọn cột bắt đầu bằng chữ country\ndf %>% select(starts_with(\"country\")) %>% colnames()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"country_name\" \"country_code\"\n```\n:::\n\n```{.r .cell-code}\n# --- Chọn cột kết thúc bằng chữ code\ndf %>% select(ends_with(\"code\")) %>% colnames()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"country_code\"\n```\n:::\n\n```{.r .cell-code}\n# --- Chọn cột có tên chứa dấu _\ndf %>% select(contains(\"_\")) %>% colnames()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"country_name\"  \"country_code\"  \"income_group\"  \"special_notes\"\n[5] \"table_name\"   \n```\n:::\n\n```{.r .cell-code}\n# --- Chọn cột có datatype là char\ndf %>% select(where(is.character)) %>% colnames()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"country_name\"  \"country_code\"  \"year\"          \"region\"       \n[5] \"income_group\"  \"special_notes\" \"table_name\"   \n```\n:::\n\n```{.r .cell-code}\n# --- Xóa cột \ndf %>% select(-country_name) %>% colnames()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"country_code\"  \"year\"          \"gdp\"           \"region\"       \n[5] \"income_group\"  \"special_notes\" \"table_name\"   \n```\n:::\n:::\n\n\n### Tạo cột mới\n\nNhư đã được nhắc đến trong phần 3, lệnh `mutate` được sử dụng để tạo cột mới hoặc chỉnh sửa giá trị của cột.\n\nMột số argument (tham số) thông dụng của lệnh `mutate`\n\n-   `.before` / `.after` quy định vị trí của cột mới trước hoặc sau cột được chỉ định\n\n-   `.keep` quy định các cột được giữ lại sau lệnh `mutate`\n\n    -   `\"all\"` giữ lại tất cả các cột gốc (default)\n\n    -   `\"none\"` không giữ lại các cột gốc\n\n    -   `\"used\"` giữ lại các cột được sử dụng trong `mutate`\n\n    -   `\"unused\"` giữ lại các cột [không]{.underline} được sử dụng\n\n**VD**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  mutate(\n    # tạo cột mới kết hợp 3 cột country_name, country_code, region\n    country_details = str_glue(\"Name: {country_name} Code:{country_code} Region: {region}\"),\n    .keep = \"used\", # giữ các cột được sử dụng\n    .before = country_name # đặt cột country_details trước cột country_name\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,128 × 4\n   country_details                              country_name country_code region\n   <glue>                                       <chr>        <chr>        <chr> \n 1 Name: Aruba Code:ABW Region: Latin America … Aruba        ABW          Latin…\n 2 Name: Aruba Code:ABW Region: Latin America … Aruba        ABW          Latin…\n 3 Name: Aruba Code:ABW Region: Latin America … Aruba        ABW          Latin…\n 4 Name: Aruba Code:ABW Region: Latin America … Aruba        ABW          Latin…\n 5 Name: Aruba Code:ABW Region: Latin America … Aruba        ABW          Latin…\n 6 Name: Aruba Code:ABW Region: Latin America … Aruba        ABW          Latin…\n 7 Name: Aruba Code:ABW Region: Latin America … Aruba        ABW          Latin…\n 8 Name: Aruba Code:ABW Region: Latin America … Aruba        ABW          Latin…\n 9 Name: Africa Eastern and Southern Code:AFE … Africa East… AFE          <NA>  \n10 Name: Africa Eastern and Southern Code:AFE … Africa East… AFE          <NA>  \n# ℹ 2,118 more rows\n```\n:::\n:::\n\n\n::: callout-note\n### Hàm `mutate_at`\n\nĐược sử dụng khi cần áp dụng 1 function lên nhiều cột cùng lúc\\\nVD: chuyển region, income_group sang dạng factor\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% mutate_at(c(\"region\", \"income_group\"), as.factor)\n```\n:::\n\n:::\n\n## Xử lý các dữ liệu lỗi\n\n### Kiểm tra giá trị\n\nThường bao gồm các bước chính\n\n-   Kiểm tra datatype\n\n-   Kiểm tra các giá trị NA\n\n-   Kiểm tra các khoảng giá trị của từng cột\n\n#### Kiểm tra datatype\n\nKhi đọc dữ liệu, R sẽ tự động đổi datatype của các cột sang dạng phù hợp nhất. Tuy nhiên, đôi lúc R sẽ chuyển thành datatype khác với mong muốn.\n\nMột số trường hợp có thể xảy ra lỗi bao gồm:\n\n-   Cột số nhưng có 1 số hàng chứa chữ\n\n-   Ngày theo format khác với format tiêu chuẩn của R (VD: `as.Date(\"01-01-2014\")`)\n\nĐể kiểm tra datatype, ta có thể print bảng và xem tên datatype bên dưới tên mỗi cột\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,128 × 8\n   country_name      country_code year     gdp region income_group special_notes\n   <chr>             <chr>        <chr>  <dbl> <chr>  <chr>        <chr>        \n 1 Aruba             ABW          2015  28419. Latin… High income  <NA>         \n 2 Aruba             ABW          2016  28450. Latin… High income  <NA>         \n 3 Aruba             ABW          2017  29329. Latin… High income  <NA>         \n 4 Aruba             ABW          2018  30918. Latin… High income  <NA>         \n 5 Aruba             ABW          2019  31903. Latin… High income  <NA>         \n 6 Aruba             ABW          2020  24008. Latin… High income  <NA>         \n 7 Aruba             ABW          2021  29128. Latin… High income  <NA>         \n 8 Aruba             ABW          2022  33301. Latin… High income  <NA>         \n 9 Africa Eastern a… AFE          2015   1554. <NA>   <NA>         26 countries…\n10 Africa Eastern a… AFE          2016   1444. <NA>   <NA>         26 countries…\n# ℹ 2,118 more rows\n# ℹ 1 more variable: table_name <chr>\n```\n:::\n:::\n\n\n#### Kiểm tra NA/ khoảng giá trị của từng cột\n\nTrong R có lệnh `summary` để người dùng có thể nhanh chóng kiểm tra các khoảng giá trị và số dữ liệu NA trong từng cột.\n\nNgoài ra, tuỳ vào bộ dữ liệu, có thể cần kiểm tra giá trị giữa các cột (VD: trong dữ liệu tiêm chủng có thể có mũi 2 trùng hoặc trước ngày tiêm mũi 1)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n country_name       country_code           year                gdp          \n Length:2128        Length:2128        Length:2128        Min.   :   216.8  \n Class :character   Class :character   Class :character   1st Qu.:  2181.9  \n Mode  :character   Mode  :character   Mode  :character   Median :  6690.6  \n                                                          Mean   : 16939.5  \n                                                          3rd Qu.: 20256.4  \n                                                          Max.   :240862.2  \n                                                          NA's   :78        \n    region          income_group       special_notes       table_name       \n Length:2128        Length:2128        Length:2128        Length:2128       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n### Xử lý dữ liệu\n\nThường bao gồm các bước chính\n\n-   Mã hoá lại dữ liệu\n\n-   Lọc trùng\n\n-   Lọc hàng\n\n#### Mã hoá dữ liệu\n\nCác trường hợp có thể cần mã hoá lại dữ liệu:\n\n-   Dữ liệu NA (trống)\n\n-   Các dữ liệu dạng TRUE/FALSE được hiển thị bằng cách khác trong dữ liệu gốc (VD: Đánh dấu X hoặc bỏ trống trong file excel)\n\nCác lệnh liên quan đến mã hoá dữ liệu:\n\n-   `replace_na` thay thế giá trị `NA` bằng giá trị được cung cấp\n\n-   `is.na` chuyển thành định dạng logical, các dữ liệu trống (NA) có giá trị TRUE và ngược lại\n\n-   `ifelse` mã hoá theo điều kiện đơn giản, chỉ có 2 trường hợp khi đáp ứng điều kiện hoặc không.\n\n-   `case_when` mã hóa giá trị cho nhiều trường hợp nhất định\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --- Thay thế các giá trị NA trong cột col1 thành \"default\"\ndf %>% \n  mutate(col1 = replace_na(\"default\"))\n\n# --- Thay thế các giá trị được đánh dấu trong col2 thành TRUE và ngược lại\ndf %>% \n  mutate(col2 = !is.na(col2))\n# Cách làm khác bằng ifelse\ndf %>% \n  mutate(col2 = ifelse(is.na(col2), FALSE, TRUE))\n```\n:::\n\n\n#### Lọc trùng\n\nLệnh `distinct` của gói `dplyr` sẽ dữ lại 1 hàng duy nhất trong các hàng có giá trị bị trùng.\n\nLệnh `distinct` mặc định sẽ kiểm tra giá trị của tất cả các cột (2 hàng được đánh giá là trùng khi tất cả các trị của chúng giống nhau).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% distinct()\n```\n:::\n\n\n#### Lọc hàng\n\nBước làm sạch điển hình sau khi đã làm sạch các cột và các giá trị được mã hóa lại đó là *lọc* bộ dữ liệu cho các hàng cụ thể\n\nĐể lọc hàng, ta dùng lệnh `filter` kết hợp với điều kiện lọc như đã học ở phần @sec-filter-condition\n\nMột số điều kiện lọc:\n\n-   Loại bỏ `NA`: `!is.na()`\n\n-   Lọc bằng số thứ tự hàng\n\n-   Lọc theo giá trị\n\n\n::: {.cell}\n\n```{.r .cell-code}\n # --- Loại các hàng có NA tại cột year hoặc gdp \ndf %>% filter(!is.na(year) | !is.na(gdp))\n\n# --- Lọc hàng 10 đến hàng 20\ndf[10:20, ] # Lọc theo cách của base R \ndf %>% filter(row_number() %in% c(10:20)) # lọc theo cách của dplyr\n\n# --- Lọc hàng theo giá trị\ndf %>% filter(year > 2016)\n```\n:::\n\n\n::: callout-note\n### Lệnh `drop_NA` {.callout-note}\n\n`drop_NA` là lệnh để nhanh chóng drop các hàng có chứa giá trị `NA` (ở bất kỳ cột nào)\\\nNếu tên cột được cung cấp, `drop_NA` chỉ drop các hàng có giá trị `NA` ở các cột được quy định\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --- drop tất cả các hàng có giá trị NA\ndf %>% drop_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 690 × 8\n   country_name country_code year    gdp region       income_group special_notes\n   <chr>        <chr>        <chr> <dbl> <chr>        <chr>        <chr>        \n 1 Afghanistan  AFG          2015   567. South Asia   Low income   \"The reporti…\n 2 Afghanistan  AFG          2016   523. South Asia   Low income   \"The reporti…\n 3 Afghanistan  AFG          2017   526. South Asia   Low income   \"The reporti…\n 4 Afghanistan  AFG          2018   492. South Asia   Low income   \"The reporti…\n 5 Afghanistan  AFG          2019   498. South Asia   Low income   \"The reporti…\n 6 Afghanistan  AFG          2020   512. South Asia   Low income   \"The reporti…\n 7 Afghanistan  AFG          2021   356. South Asia   Low income   \"The reporti…\n 8 Angola       AGO          2015  3217. Sub-Saharan… Lower middl… \"The World B…\n 9 Angola       AGO          2016  1810. Sub-Saharan… Lower middl… \"The World B…\n10 Angola       AGO          2017  2439. Sub-Saharan… Lower middl… \"The World B…\n# ℹ 680 more rows\n# ℹ 1 more variable: table_name <chr>\n```\n:::\n\n```{.r .cell-code}\n# --- chỉ drop các hàng có giá trị NA tại cột year\ndf %>% drop_na(year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,128 × 8\n   country_name      country_code year     gdp region income_group special_notes\n   <chr>             <chr>        <chr>  <dbl> <chr>  <chr>        <chr>        \n 1 Aruba             ABW          2015  28419. Latin… High income  <NA>         \n 2 Aruba             ABW          2016  28450. Latin… High income  <NA>         \n 3 Aruba             ABW          2017  29329. Latin… High income  <NA>         \n 4 Aruba             ABW          2018  30918. Latin… High income  <NA>         \n 5 Aruba             ABW          2019  31903. Latin… High income  <NA>         \n 6 Aruba             ABW          2020  24008. Latin… High income  <NA>         \n 7 Aruba             ABW          2021  29128. Latin… High income  <NA>         \n 8 Aruba             ABW          2022  33301. Latin… High income  <NA>         \n 9 Africa Eastern a… AFE          2015   1554. <NA>   <NA>         26 countries…\n10 Africa Eastern a… AFE          2016   1444. <NA>   <NA>         26 countries…\n# ℹ 2,118 more rows\n# ℹ 1 more variable: table_name <chr>\n```\n:::\n:::\n\n:::\n\n::: callout-important\n### Lọc hàng khi còn giá trị NA\n\nViệc lọc với điều kiện lớn hơn (\\>) hoặc nhỏ hơn (\\<) một ngày hoặc số có thể loại bỏ bất kỳ hàng nào có giá trị `NA`. Điều này là do `NA` được coi là giá trị lớn hoặc nhỏ vô hạn.\n:::\n",
    "supporting": [
      "clean_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}