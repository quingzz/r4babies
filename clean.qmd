::: callout-tip
Mục tiêu

1.  
:::

::: callout-note
# Các package được sử dụng trong bài học {.callout-note}

-   readxl

-   janitor

-   tidyverse
:::

# Làm sạch

Bước đầu tiên sau khi đọc được dữ liệu vào R là "làm sạch" dữ liệu (clean data). Chúng ta chỉ tiến hành phân tích khi chắc chắn dữ liệu đã "sạch" và chính xác.

## Data gọn gàng (tidy data)

Dữ liệu gọn gàng có các đặc điểm sau:[@wickham2014]

-   Mỗi biến là một cột; mỗi cột là một biến
-   Mỗi quan sát là một hàng; mỗi hàng là một quan sát
-   Mỗi giá trị nằm trong một ô; mỗi ô chứa một giá trị duy nhất

Chúng ta sẽ dùng data `gdp-capita.xlsx`

```{r}
library(readxl)
library(janitor)
library(tidyverse)

df <- read_excel(path = "data/gdp-capita.xlsx", sheet = 1)
```

## Format bảng

Bảng dữ liệu hiện tại chưa tuân theo quy tắc tidy data vì các cột 2015 - 2022 **không phải là biến** và **mỗi hàng đang chứa nhiều quan sát** (quan sát cho các năm từ 2015 - 2022).

Hiện tại bảng dữ liệu đang ở `định dạng ngang (wide)`, khi nhiều quan sát của cùng chủ thể (trong VD này là các quốc gia) được lưu trữ trong một hàng duy nhất. Điều này có thể hữu ích cho việc hiển thị, tuy nhiên không lý tưởng cho việc phân tích.

Để tuân theo quy tắc tidy data, ta cần format bảng dữ liệu sang `định dạng dọc (long)`

Để format bảng dữ liệu trong R, ta có thể sử dụng các lệnh sau.\
- `pivot_longer()` - chuyển dữ liệu từ dạng ngang sang dọc.\
- `pivot_wider()` - chuyển dữ liệu từ dạng dọc sang ngang.\

```{r}
df <- df %>% 
  pivot_longer(
    cols = starts_with("2"),
    # đặt tên mới cho biến
    names_to = "year",
    # đặt tên mới cho cột giá trị tương ứng
    values_to = "gdp")
```

## Tên cột

Trong R, tên cột là giá trị trên đỉnh của một cột.

Các quy tắc cho tên cột thường bao gồm:\
- Tên ngắn\
- Không có khoảng trắng (thay thế bằng dấu gạch dưới \_ ).\
- Không có ký tự đặc biệt (&, #, \<, \>, ...) hoặc dấu.\
- Không bắt đầu bằng số.

Lệnh `clean_names()` của package `janitor` được sử dụng để tự động hoá quá trình chuẩn hoá tên cột. Ngoài ra, lệnh `rename()` của package `dplyr` được sử dụng để thay đổi tên cột một cách thủ công.

```{r}
# chuẩn hoá tên cột tự động
df <- clean_names(df)
```

## Kết hợp dữ liệu

Trong nhiều trường hợp, dữ liệu bị chia thành nhiều bảng khác nhau và để phân tích thì chúng ta phải kết hợp các bảng lại.

Để nối 2 bảng với nhau trong R, ta sử dụng 1 trong các lệnh join của package `dplyr` sau đây

| Function     | Công dụng          | GIF minh hoạ                                                                                             |
|-------------|-------------|-----------------------------------------------|
| left_join()  | Nối ngoài bên trái | ![](https://github.com/gadenbuie/tidyexplain/blob/main/images/left-join.gif?raw=true){width="283"}       |
| right_join() | Nối ngoài bên phải | ![]()![](https://github.com/gadenbuie/tidyexplain/blob/main/images/right-join.gif?raw=true){width="282"} |
| inner_join() | Nối trong          | ![](https://github.com/gadenbuie/tidyexplain/blob/main/images/inner-join.gif?raw=true){width="281"}      |
| full_join()  | Nối ngoài          | ![](https://github.com/gadenbuie/tidyexplain/blob/main/images/full-join.gif?raw=true){width="281"}       |

Để sử dụng lệnh join, ta cần cung cấp cho R các thông tin sau:

-   2 bảng cần nối

-   các cột chung để nối bằng lệnh `join_by` (R mặc định nối 2 bảng bằng cột có tên giống nhau)

[Tổng hợp các lệnh join cùng GIF minh hoạ](https://github.com/gadenbuie/tidyexplain/tree/main)

```{r}
mt <- read_excel(path = "data/gdp-capita.xlsx", sheet = 2) %>% 
  clean_names()

# --- Nối 2 bảng bằng lệnh left_join
# Trong trường hợp này, tuy lệnh join_by không cần thiết nhưng có thể giúp cho code rõ ràng hơn 
left_join(df, mt, by = join_by(country_code == country_code))
```
